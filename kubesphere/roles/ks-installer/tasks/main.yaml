---

- name: ks-installer | Getting ks-installer installation files
  copy:
    src: "ks-installer"
    dest: "{{ kubesphere_dir }}/"


- name: ks-installer | Createing system namespaces
  shell: >
    {{ bin_dir }}/kubectl create ns {{ item }}
  register: import
  loop:
    - kubesphere-system
    - kubesphere-monitoring-system
  failed_when: "import.stderr and 'AlreadyExists' not in import.stderr"


- name: ks-installer | Create the Secret of CA
  shell: >
    {{ bin_dir }}/kubectl -n kubesphere-system create secret generic kubesphere-ca
    --from-file=ca.crt=/etc/kubernetes/pki/ca.crt
    --from-file=ca.key=/etc/kubernetes/pki/ca.key
  register: import
  failed_when: "import.stderr and 'AlreadyExists' not in import.stderr"


- name: ks-monitor | Creating kube-etcd-client-certs-secret
  command: >
    {{ bin_dir }}/kubectl -n kubesphere-monitoring-system create secret generic kube-etcd-client-certs
    --from-file=etcd-client-ca.crt={{ etcd_client_ca_crt }}
    --from-file=etcd-client.crt={{ etcd_client_crt }}
    --from-file=etcd-client.key={{ etcd_client_key }}
  register: import
  failed_when: "import.stderr and 'AlreadyExists' not in import.stderr"


- name: ks-installer | Creating manifests
  template:
    src: "{{ item.file }}.j2"
    dest: "{{ kubesphere_dir }}/ks-installer/{{ item.file }}"
  with_items:
    - { name: ks-installer-config, file: ks-installer-config.yaml, type: config }
    - { name: ks-installer-deployment, file: ks-installer-deployment.yaml, type: deploy }


- name: ks-installer | Creating KubeSphere Installer
  shell: >
    {{ bin_dir }}/kubectl apply -f {{ kubesphere_dir }}/ks-installer/{{ item }}
  loop:
    - ks-installer-config.yaml
    - ks-installer-deployment.yaml
  register: import
  failed_when: "import.stderr and 'AlreadyExists' not in import.stderr"


- name: kubesphere-installer is ok
  shell: >
     {{ bin_dir }}/kubectl get pod -n kubesphere-system | grep Running | grep ks-installer
  register: result
  until: result.stdout.find("Running") != -1
  retries: 30
  delay: 30

